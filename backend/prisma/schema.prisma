// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  email String @unique
  hash String
  displayName String

  createdForms Form[] @relation("UserCreatedForms")
  formResponses FormResponse[] @relation("UserFormResponses")

  @@map("users")
}

enum QuestionType {
  CHECKBOX
  RADIOBUTTON
  SHORT_ANSWER
  PARAGRAPH
  LINIAR_SCALE
  CHOICE_GRID
  CHECKBOX_GRID
}

model Form {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user User @relation("UserCreatedForms", fields: [userId], references: [id], onDelete: Cascade)

  title String
  description String?
  url String @unique
  isAnonymous Boolean @default(true)

  questions Question[] @relation("FormQuestions")
  formResponses FormResponse[] @relation("FormFormResponses")

  @@map("forms")
}

model Question {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formId Int
  form Form @relation("FormQuestions", fields: [formId], references: [id], onDelete: Cascade)

  type QuestionType
  text String
  isRequired Boolean @default(false)


  options Option[] @relation("QuestionOptions")

  @@map("questions")
}

model Option {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionId Int
  question Question @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)

  text String

  responses QuestionResponse[] @relation("OptionQuestionResponses")

  @@map("options")
}

model FormResponse {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formId Int
  form Form @relation("FormFormResponses", fields: [formId], references: [id], onDelete: Cascade)
  userId Int
  user User @relation("UserFormResponses", fields: [userId], references: [id], onDelete: Cascade)

  questionResponses QuestionResponse[] @relation("FormResponseQuestionResponses")

  @@map("form_responses")
}

model QuestionResponse {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  formReponseId Int
  formReponse FormResponse @relation("FormResponseQuestionResponses", fields: [formReponseId], references: [id], onDelete: Cascade)

  optionId Int?
  option Option? @relation("OptionQuestionResponses", fields: [optionId], references: [id], onDelete: Cascade)

  text String?

  @@map("question_responses")
}
